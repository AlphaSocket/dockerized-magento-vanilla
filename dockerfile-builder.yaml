project: 
  title: &project_title Alphasocket/dockerized-magento-vanilla
  codename: &project_codename magento-vanilla
  description: Magento vanilla container

#
# Build process
# Creates dockerfile and file used in it
#
build:
  envvars:
    name: *project_codename
    # Docker
    from: docker.io/alphasocket/magento-cli-alpine:latest
    workdir: /var/www/html
    cmd: /usr/sbin/crond -f -l $CONFIG_CRON_LOG_LEVEL
  imports:
    - "templates:/usr/local/templates"
    - "mage_install_env:/usr/local/mage_install_env"

#
# Setup process injected in dockerfile
#
setup:
  # Setup env 
  envvars:
    dependencies:
      # Dependencies used during setup
      setup: ""
      # Dependencies used during runtime
      config: "rsync gettext"
    cache:
      magento:
        installer:
          version: 1.9.3.6
        sample_data:
          version: 1.9.2.4
          url:
            valueFromParse: https://netcologne.dl.sourceforge.net/project/mageloads/assets/${SETUP_CACHE_MAGENTO_SAMPLE_DATA_VERSION}/magento-sample-data-${SETUP_CACHE_MAGENTO_SAMPLE_DATA_VERSION}.zip
          path:
            valueFromParse: /tmp/magento-sample-data-${SETUP_CACHE_MAGENTO_SAMPLE_DATA_VERSION}.zip
          checksum:
            1924:
              md5: "ddb2103137e257006e30b66122caa999"
      
  # Setup Processes
  processes:
    - title: "Install dependencies"
      shell_condition: '! -z "$SETUP_DEPENDENCIES_CONFIG$SETUP_DEPENDENCIES_SETUP"'
      commands:
        - "apk add --no-cache $SETUP_DEPENDENCIES_CONFIG $SETUP_DEPENDENCIES_SETUP"
        
    - title: "Warming composer and n98 cache for config process"
      shell_condition: '"$BUILD_ENV" = "cached"'
      commands:
        # Caching Installer
        - n98-magerun.phar install --only-download --magentoVersionByName=magento-mirror-${SETUP_CACHE_MAGENTO_INSTALLER_VERSION} --installationFolder=/tmp/warmCache
        - mkdir -p /tmp/warmCache
        - echo '{"require":{}}' > /tmp/warmCache/composer.json
        - composer.phar config --working-dir=/tmp/warmCache repositories.firegento composer https://packages.firegento.com
        - composer.phar config --working-dir=/tmp/warmCache extra.magento-root-dir "/tmp/warmCache"
        - composer.phar require --working-dir=/tmp/warmCache magento-hackathon/magento-composer-installer
        - composer.phar require --working-dir=/tmp/warmCache firegento/debug
        - composer.phar require --working-dir=/tmp/warmCache connect20/nexcessnet_turpentine
        - rm -rf /tmp/warmCache
        # Sample data
        - mkdir -p $( dirname ${SETUP_CACHE_MAGENTO_SAMPLE_DATA_PATH})
        - curl -o $SETUP_CACHE_MAGENTO_SAMPLE_DATA_PATH $SETUP_CACHE_MAGENTO_SAMPLE_DATA_URL
        - SUM=$(md5sum $SETUP_CACHE_MAGENTO_SAMPLE_DATA_PATH | awk '{print $1;}' )
        - CHECKSUM_VAR_NAME=$(echo "SETUP_CACHE_MAGENTO_SAMPLE_DATA_CHECKSUM_${SETUP_CACHE_MAGENTO_SAMPLE_DATA_VERSION}_MD5" | sed 's/\.//g')
        - CHECKSUM="$(eval "echo \$$CHECKSUM_VAR_NAME")"
    
    - title: "Check sample data md5"
      shell_condition: '"$SUM" != "$CHECKSUM"'
      commands:
        - echo "### Sample data download failed"
        - echo "Url $SETUP_CACHE_MAGENTO_SAMPLE_DATA_URL "
        - echo "Sum $SUM "
        - echo "Checksum $CHECKSUM "
        - exit 1
        
#
# Config process run just before the entrypoint
#
config:
  # Config env 
  envvars:
    project:
      codename: "vanilla"
      description: "Magento Vanilla"
    user: magento-vanilla
    group: magento
    paths:
      templates:
        redis: /usr/local/templates/redis.xml
      config:
        redis:
          valueFromParse: $CONFIG_PATHS_WEBROOT/app/etc/redis.xml
    
    sample:
      data:
        version:
          valueFromParse: $SETUP_CACHE_MAGENTO_SAMPLE_DATA_VERSION
        install: True
        url: "'https://netcologne.dl.sourceforge.net/project/mageloads/assets/${CONFIG_SAMPLE_DATA_VERSION}/magento-sample-data-${CONFIG_SAMPLE_DATA_VERSION}.zip'"
        path: "'/tmp/magento-sample-data-${CONFIG_SAMPLE_DATA_VERSION}.zip'"
    admin:
      username: "admin"
      lastname: "Admin"
      firstname: "Admin"
      email: "jhon@doe.ie"
      pass: "password.123"     

    magento:
      version:
        valueFromParse: $SETUP_CACHE_MAGENTO_INSTALLER_VERSION
      user: $CONFIG_USER
      group: $CONFIG_GROUP
      url: "http://www.magento.vanilla/"
      install:
        script:
          url: https://raw.githubusercontent.com/AlphaSocket/mage-install/master/install
          path: $CONFIG_PATHS_BINARIES/mage-install
        folder: $CONFIG_PATHS_WEBROOT
        env:
          path: "/usr/local/mage_install_env"
      use:
        rewrites: "yes"
        secure: "no"
        base_url: ""
        secure_admin: "no"
      skip_url_validation: "yes" 
      locale: en_IE
      timezone: "Europe/Dublin"
      default:
        currency: EUR
      session:
        save: "db"
      admin:
        frontname: "admin"
      disable:
        cache: "no"
      set_privileges_ownership: "no"
      developer_mode: "yes"
    db:
      host: "127.0.0.1"
      name: "database"
      user: "root"
      pass: "root"
      prefix: ""
    redis:
      enabled: $GENERAL_KEYS_TRUE
      host: 127.0.0.1
      port: 6379
    turpentine:
      enabled: $GENERAL_KEYS_TRUE
      backend:
        host: 127.0.0.1
        port: 8080
        control_panel:
          host: 127.0.0.1
          port: 6082
      auth_key: ""
    composer:
      init: "yes"

  processes:
    - title: "Install mage-install script "
      commands:
        - mkdir -p $( dirname ${CONFIG_MAGENTO_INSTALL_SCRIPT_PATH})
        - curl -o $CONFIG_MAGENTO_INSTALL_SCRIPT_PATH $CONFIG_MAGENTO_INSTALL_SCRIPT_URL
        - chmod +x $CONFIG_MAGENTO_INSTALL_SCRIPT_PATH
    
    - title: "Wait until the DB is ready"
      commands:
        - CONDITION="mysql -h${CONFIG_DB_HOST} -u${CONFIG_DB_USER} -p${CONFIG_DB_PASS}"
        - MAX_TRIES=300
        - SECONDS_BETWEEN_TRIES=1
        - c=0
        - while ! eval "$CONDITION"; 
          do 
            if [ $c -ge ${MAX_TRIES} ]; then exit 1; else c=$(($c + 1)); fi;
            echo "Waiting for db.. Try $c failed"; 
            sleep ${SECONDS_BETWEEN_TRIES}; 
          done
          
    - title: "Removing old magento installation data"
      commands:
        # Cleaning folder and DB
        - rm ${CONFIG_MAGENTO_INSTALL_FOLDER}/* -rf
        - echo "DROP DATABASE IF EXISTS \`${CONFIG_DB_NAME}\`;CREATE DATABASE \`${CONFIG_DB_NAME}\`;" | mysql -h${CONFIG_DB_HOST} -u${CONFIG_DB_USER} -p${CONFIG_DB_PASS}
      
    - title: "Install magento sample data"
      shell_condition: '"$CONFIG_SAMPLE_DATA_INSTALL" = "$GENERAL_KEYS_TRUE"'
      commands:
        # Download sample data
        - if [ ! -f "$CONFIG_SAMPLE_DATA_PATH" ]; then
            echo "-o $CONFIG_SAMPLE_DATA_PATH $CONFIG_SAMPLE_DATA_URL" | envsubst | xargs -exec curl
            if [ "$SETUP_CACHE_MAGENTO_SAMPLE_DATA_VERSION" = "$CONFIG_SAMPLE_DATA_VERSION" ]; then
              if [ "ddb2103137e257006e30b66122caa999" != "$SUM" ]; then echo "Checksum verification failed on sample data"; exit 1; fi;
            fi;
          fi;
        # Extract
        - cat $CONFIG_SAMPLE_DATA_PATH | unzip -d /tmp -
        # Apply files to DB
        - mysql -h${CONFIG_DB_HOST} -u${CONFIG_DB_USER} -p${CONFIG_DB_PASS} ${CONFIG_DB_NAME} < /tmp/magento-sample-data-${CONFIG_SAMPLE_DATA_VERSION}/magento_sample_data_for_${CONFIG_SAMPLE_DATA_VERSION}.sql
        # Cleaning
        - rm /tmp/magento-sample-data-${CONFIG_SAMPLE_DATA_VERSION}.* -rf
    
    - title: "Install magento"
      shell_condition: '! -s "${CONFIG_MAGENTO_INSTALL_FOLDER}/app/etc/local.xml"'
      commands:
        # Building env file
        #- envsubst < /usr/local/templates/.n98-magerun.yaml > ~/.n98-magerun.yaml
        #- if [ "${CONFIG_MAGENTO_DEVELOPER_MODE}" = 'yes' ] ; then DEVELOPER_MODE='--developer-mode'; fi
        
        # Magento installation
        #- n98-magerun.phar install \
        #    --installationFolder="${CONFIG_MAGENTO_INSTALL_FOLDER}" \
        #    --magentoVersionByName="${CONFIG_MAGENTO_VERSION}" \
        #    --installSampleData="${CONFIG_SAMPLE_DATA_INSTALL}" \
        #    
        #- n98-magerun.phar install \
        #    --installationFolder="${CONFIG_MAGENTO_INSTALL_FOLDER}" \
        #    --magentoVersionByName="${CONFIG_MAGENTO_VERSION}" \
        #    --dbHost="${CONFIG_DB_HOST}" \
        #    --dbName="${CONFIG_DB_NAME}" \
        #    --dbUser="${CONFIG_DB_USER}" \
        #    --dbPass="${CONFIG_DB_PASS}" \
        #    --dbPrefix="${CONFIG_DB_PREFIX}" \
        #    --baseUrl="${CONFIG_MAGENTO_URL}" \
        #    --installSampleData="${CONFIG_SAMPLE_DATA_INSTALL}" \
        #    ${DEVELOPER_MODE} \
        #    --useDefaultConfigParams=yes 1>/dev/stdout 2>/dev/stderr
        #
        
        # Building env file
        - envsubst < $CONFIG_MAGENTO_INSTALL_ENV_PATH > /tmp/magento_vanilla_env
        # Magento installation
        - $CONFIG_MAGENTO_INSTALL_SCRIPT_PATH /tmp/magento_vanilla_env 1>/dev/stdout 2>/dev/stderr
        # Removing env file
        - rm -f /tmp/magento_vanilla_env

    - title: "Import magento sample data static files"
      shell_condition: '"$CONFIG_SAMPLE_DATA_INSTALL" = "$GENERAL_KEYS_TRUE"'
      commands:
        # Apply files to installation
        - rsync -rtv /tmp/magento-sample-data-${CONFIG_SAMPLE_DATA_VERSION}/ "$CONFIG_PATHS_WEBROOT/"
        - rm -f $CONFIG_PATHS_WEBROOT/*.sql
        
    - title: "Configure composer"
      commands:
        #- composer.phar init -n --working-dir=${CONFIG_MAGENTO_INSTALL_FOLDER} # Alreay initialized in installation
        - composer.phar config repositories.firegento composer https://packages.firegento.com
        - composer.phar config extra.magento-root-dir "."
        - composer.phar require magento-hackathon/magento-composer-installer
        - composer.phar require firegento/debug
        
    - title: "Setup redis config"
      shell_condition: '"$CONFIG_REDIS_ENABLED" = "$GENERAL_KEYS_TRUE"'
      commands:
        - '[ -d "$CONFIG_PATHS_WEBROOT/app/etc/" ] || mkdir -p "$CONFIG_PATHS_WEBROOT/app/etc/"'
        - envsubst < $CONFIG_PATHS_TEMPLATES_REDIS > $CONFIG_PATHS_CONFIG_REDIS
        - n98-magerun.phar dev:module:enable Cm_RedisSession

    - title: "Setup turpentine if requested"
      shell_condition: '"$CONFIG_TURPENTINE_ENABLED" = "$GENERAL_KEYS_TRUE"'
      commands:
        - TURPENTINE_SERVERLIST="$CONFIG_TURPENTINE_BACKEND_CONTROL_PANEL_HOST:$CONFIG_TURPENTINE_BACKEND_CONTROL_PANEL_PORT"
        - composer.phar require connect20/nexcessnet_turpentine
        - n98-magerun.phar config:set turpentine_vcl/backend/backend_host "$CONFIG_TURPENTINE_BACKEND_HOST"
        - n98-magerun.phar config:set turpentine_vcl/backend/backend_port "$CONFIG_TURPENTINE_BACKEND_PORT"
        - n98-magerun.phar config:set turpentine_varnish/servers/server_list "$TURPENTINE_SERVERLIST"
        - n98-magerun.phar config:set turpentine_varnish/servers/auth_key "$CONFIG_TURPENTINE_AUTH_KEY"
        - n98-magerun.phar dev:module:enable Nexcessnet_Turpentine
    
    - title: "End conf"
      commands:
        # Warm cache
        - n98-magerun.phar cache:enable
        - n98-magerun.phar sys:setup:incremental -n
        - n98-magerun.phar index:reindex:all
        - php -r "require_once 'index.php'; Mage::run('','store',array('request'=>'index'));"
        - n98-magerun.phar cache:clean
        - n98-magerun.phar sys:check
        - echo "### Magento is ready"
        
    - title: "Setting up liveness cron"
      commands:
        - (crontab -l ; echo "* * * * * echo 'ready' > /tmp/container_status") | sort - | uniq - | crontab -

test:
  envvars:
    redis:
      pass: redisPass
    db:
      name: magento_test
      user: magento
      pass: vanillaPass
      root:
        pass: root

  processes:
    #
    # Starting
    #
    - title: "Starting pause container"
      commands:
        - TEST_CONTAINER_PAUSE_ID=$(
            docker run 
              -d --name=${TEST_CONTAINER_NAME}-pause-tester
              03192859189254/dockerized-nginx-tester:latest
          )

    - title: "Starting DB container"
      commands:
        - TEST_CONTAINER_DB_ID=$(
            docker run 
              -d --name=${TEST_CONTAINER_NAME}-mariadb-tester
              --net=container:${TEST_CONTAINER_NAME}-pause-tester
              -e MYSQL_DATABASE=$TEST_DB_NAME
              -e MYSQL_USER=$TEST_DB_USER
              -e MYSQL_PASSWORD=$TEST_DB_PASS
              -e MYSQL_ROOT_PASSWORD=$TEST_DB_ROOT_PASS
              mariadb:latest
          )

    - title: "Starting redis container"
      commands:
        - TEST_CONTAINER_REDIS_ID=$(
            docker run 
              -d --name=${TEST_CONTAINER_NAME}-redis-tester
              --net=container:${TEST_CONTAINER_NAME}-pause-tester
              -e CONFIG_REDIS_PASS=$TEST_REDIS_PASS
              docker.io/alphasocket/redis-alpine:latest
          )

    - title: "Starting magento-cli container"
      commands:
        - TEST_CONTAINER_MAGENTO_CLI_ID=$(
            docker run 
              -d --name=$TEST_CONTAINER_NAME
              --net=container:${TEST_CONTAINER_NAME}-pause-tester
              -e CONFIG_DB_NAME=$TEST_DB_NAME
              -e CONFIG_DB_USER=$TEST_DB_USER
              -e CONFIG_DB_PASS=$TEST_DB_PASS
              -e CONFIG_REDIS_HOST=127.0.0.1
              -e CONFIG_REDIS_PASS=$TEST_REDIS_PASS
              ${BUILD_USER}/${BUILD_NAME}:${BUILD_VERSION}
          )
        - sleep 1
        - TEST_CONTAINER_MAGENTO_CLI_STATUS=$(docker inspect -f '{{.State.Running}}' $TEST_CONTAINER_MAGENTO_CLI_ID)

    - title: "Testing magento-cli container"
      shell_condition: '! "$TEST_CONTAINER_MAGENTO_CLI_STATUS" = "true"'
      commands:
        - echo "### Magento-cli container failed, print logs and exiting"
        - docker logs $TEST_CONTAINER_MAGENTO_CLI_ID
      else:
        - echo "### Magento-cli is running"

    - title: "Testing magento installation"
      shell_condition: '"$TEST_CONTAINER_MAGENTO_CLI_STATUS" = "true"'
      commands:
        #- MAGENTO_INSTALLATION_REPORT=$(sleep 10 && docker exec $TEST_CONTAINER_MAGENTO_CLI_ID /bin/sh -c "n98-magerun.phar sys:check" )
        #- MAGENTO_INSTALLATION_REPORT_TEST=$(echo "$MAGENTO_INSTALLATION_REPORT" | grep -q "app/etc/local.xml" && echo "Success")
        - CONDITION="docker exec $TEST_CONTAINER_MAGENTO_CLI_ID /bin/sh -c 'cat /tmp/container_status'"
        - MAX_TRIES=300
        - SECONDS_BETWEEN_TRIES=1
        - c=0
        - while ! eval "$CONDITION"; 
          do 
            if [ $c -ge ${MAX_TRIES} ] || [ "$(docker inspect -f '{{.State.Running}}' $TEST_CONTAINER_MAGENTO_CLI_ID)" != 'true' ]; then
              echo "Magento installation failed, print logs and exiting\n";
              docker logs $TEST_CONTAINER_NAME;
              exit 1;
            else
              c=$(($c + 1));
              echo "Testing container readiness.. Try $c failed"; 
              sleep ${SECONDS_BETWEEN_TRIES}; 
            fi;
          done && echo "### Test Succeeded\n"
        
